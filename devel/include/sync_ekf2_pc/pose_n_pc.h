// Generated by gencpp from file sync_ekf2_pc/pose_n_pc.msg
// DO NOT EDIT!


#ifndef SYNC_EKF2_PC_MESSAGE_POSE_N_PC_H
#define SYNC_EKF2_PC_MESSAGE_POSE_N_PC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace sync_ekf2_pc
{
template <class ContainerAllocator>
struct pose_n_pc_
{
  typedef pose_n_pc_<ContainerAllocator> Type;

  pose_n_pc_()
    : pose_sync()
    , pc_sync()  {
    }
  pose_n_pc_(const ContainerAllocator& _alloc)
    : pose_sync(_alloc)
    , pc_sync(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_sync_type;
  _pose_sync_type pose_sync;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _pc_sync_type;
  _pc_sync_type pc_sync;





  typedef boost::shared_ptr< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> const> ConstPtr;

}; // struct pose_n_pc_

typedef ::sync_ekf2_pc::pose_n_pc_<std::allocator<void> > pose_n_pc;

typedef boost::shared_ptr< ::sync_ekf2_pc::pose_n_pc > pose_n_pcPtr;
typedef boost::shared_ptr< ::sync_ekf2_pc::pose_n_pc const> pose_n_pcConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator1> & lhs, const ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator2> & rhs)
{
  return lhs.pose_sync == rhs.pose_sync &&
    lhs.pc_sync == rhs.pc_sync;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator1> & lhs, const ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sync_ekf2_pc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71ef86c488f3dbd4c8a0838abdc40c23";
  }

  static const char* value(const ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71ef86c488f3dbd4ULL;
  static const uint64_t static_value2 = 0xc8a0838abdc40c23ULL;
};

template<class ContainerAllocator>
struct DataType< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sync_ekf2_pc/pose_n_pc";
  }

  static const char* value(const ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"geometry_msgs/Pose pose_sync\n"
"\n"
"uint8[] pc_sync\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_sync);
      stream.next(m.pc_sync);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_n_pc_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sync_ekf2_pc::pose_n_pc_<ContainerAllocator>& v)
  {
    s << indent << "pose_sync: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_sync);
    s << indent << "pc_sync[]" << std::endl;
    for (size_t i = 0; i < v.pc_sync.size(); ++i)
    {
      s << indent << "  pc_sync[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.pc_sync[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYNC_EKF2_PC_MESSAGE_POSE_N_PC_H
